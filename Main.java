/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.sql.Connection;
import java.sql.*;
import java.awt.*;
import javax.swing.*;

/**
 *
 * @author Salim grit
 */
class LibraryDatabase extends javax.swing.JFrame {

    private Connection connection;
    private int usersId;
    private String userName;
    private ResultSet resultSet;
    private ResultSet rsSeeingUserCatalogue;
    private String usersCatalogueLists;
    private String historyActivity;

    public LibraryDatabase () {
        initComponents();
        initializeDatabaseConnection();

    }

    private void initializeDatabaseConnection(){
        Database.username = "root";
        Database.password = "Password3\"";
        Database.port = 3306;
        Database.database = "inlamningsuppgift";

        connection = Database.getConnection();
        if (connection == null) {
            JOptionPane.showMessageDialog(null, "Couldn't connect to the database. Exiting.");
            System.exit(-1);
        }
    }

    private void logIn(Connection conn, String name, String password) {

        String sql = "select * from users where name = '" + name + "' and password = '" + password + "'";
        try {

            Statement statement = conn.createStatement();
            ResultSet resultFromLogInProfile = statement.executeQuery(sql); // you use the resultset to show to the user
            if(resultFromLogInProfile.next()) {

                usersId = resultFromLogInProfile.getInt("id");
                userName = resultFromLogInProfile.getString("name");
                log(conn, String.valueOf(usersId),name + " logs in");
                logInPanel.removeAll();
                logInPanel.add(homePanelIn);
                homePanelIn.repaint();
                homePanelIn.revalidate();
                userNameLabel.setText("Hi " + userName + "!");
                JOptionPane.showMessageDialog(null, "You are logged in!");
                //searchCatalogues(conn, scanner, usersId, userName);
                //seeYourCataloguesAndReturnIt(conn, scanner, usersId, userName);
                //editProfile(conn, scanner, usersId, userName);
                //activities(conn, scanner, usersId, userName);
            } else {
                JOptionPane.showMessageDialog(null, "Wrong username and password combination, try again");
            }

        } catch(SQLException ex) {
            Database.PrintSQLException(ex);
        }
    }

    private void homePanel() {
        // Switch to the homePanel after successful login
        CardLayout layout = (CardLayout) getContentPane().getLayout();
        layout.show(getContentPane(), "homePanel");

    }

    private static void log(Connection conn, String userId, String message) {
        try {

            String user = (userId == null || userId.isEmpty()) ? "NULL" : userId;
            Statement statement = conn.createStatement();
            String sql = "insert into Log set usersId = " + user + ", message = '" + message + "'";
            //System.out.println(sql);
            statement.executeUpdate(sql);
        } catch(SQLException ex) {
            Database.PrintSQLException(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        jPanel2 = new javax.swing.JPanel();
        logInPanel = new javax.swing.JPanel();
        logInPanelLeft = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        logInPanelRight = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        logInButton = new javax.swing.JButton();
        homePanel = new javax.swing.JPanel();
        homePanelIn = new javax.swing.JPanel();
        yourCatalogueButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        activityButton = new javax.swing.JButton();
        editProfileButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        yourCataloguePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        yourCatalogueTextAreaTwo = new javax.swing.JTextArea();
        returnPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        returnCataloguePanel = new javax.swing.JTextArea();
        returnTextField = new javax.swing.JTextField();
        confirmReturnButton = new javax.swing.JButton();
        editProfilePanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        newUsernameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        newEmailAdressTextField = new javax.swing.JTextField();
        confirmChangesButton = new javax.swing.JButton();
        newPasswordTextField = new javax.swing.JPasswordField();
        activityPanel = new javax.swing.JPanel();
        logLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        activityHistoryTextArea = new javax.swing.JTextArea();
        searchResult = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        mediatypePanel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        catalogueProfilePanel = new javax.swing.JTextArea();
        burrowButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jLabel1.setText("Welcome to your digital Library");

        jLabel2.setText("Salim Otong");

        jLabel3.setText("Powered by Java Swing");

        jLabel4.setText("Database and Database design");

        javax.swing.GroupLayout logInPanelLeftLayout = new javax.swing.GroupLayout(logInPanelLeft);
        logInPanelLeft.setLayout(logInPanelLeftLayout);
        logInPanelLeftLayout.setHorizontalGroup(
                logInPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logInPanelLeftLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(logInPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(195, Short.MAX_VALUE))
        );
        logInPanelLeftLayout.setVerticalGroup(
                logInPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logInPanelLeftLayout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        logInPanelRight.setBackground(new java.awt.Color(204, 255, 255));

        jLabel5.setText("Input username");

        usernameField.setText("Username");

        jLabel6.setText("Input password");

        passwordField.setText("password");

        logInButton.setText("Log In");
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout logInPanelRightLayout = new javax.swing.GroupLayout(logInPanelRight);
        logInPanelRight.setLayout(logInPanelRightLayout);
        logInPanelRightLayout.setHorizontalGroup(
                logInPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logInPanelRightLayout.createSequentialGroup()
                                .addGroup(logInPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(logInPanelRightLayout.createSequentialGroup()
                                                .addGap(67, 67, 67)
                                                .addGroup(logInPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(passwordField)
                                                        .addComponent(usernameField)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(logInPanelRightLayout.createSequentialGroup()
                                                .addGap(112, 112, 112)
                                                .addComponent(logInButton)))
                                .addContainerGap(119, Short.MAX_VALUE))
        );
        logInPanelRightLayout.setVerticalGroup(
                logInPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logInPanelRightLayout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(logInButton)
                                .addContainerGap(266, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout logInPanelLayout = new javax.swing.GroupLayout(logInPanel);
        logInPanel.setLayout(logInPanelLayout);
        logInPanelLayout.setHorizontalGroup(
                logInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logInPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(logInPanelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(logInPanelRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        logInPanelLayout.setVerticalGroup(
                logInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logInPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(logInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(logInPanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(logInPanelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        getContentPane().add(logInPanel, "card2");

        homePanelIn.setBackground(new java.awt.Color(204, 255, 255));

        yourCatalogueButton.setText("Your Catalogue");
        yourCatalogueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yourCatalogueButtonActionPerformed(evt);
            }
        });

        searchField.setText("Search our catalogue");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        activityButton.setText("Activity");
        activityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activityButtonActionPerformed(evt);
            }
        });

        editProfileButton.setText("Edit your profile");
        editProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProfileButtonActionPerformed(evt);
            }
        });

        logOutButton.setText("Log out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        resultPanel.setLayout(new java.awt.CardLayout());

        yourCataloguePanel.setBackground(new java.awt.Color(204, 204, 204));

        yourCatalogueTextAreaTwo.setColumns(20);
        yourCatalogueTextAreaTwo.setFont(new java.awt.Font("Courier New", 2, 12)); // NOI18N
        yourCatalogueTextAreaTwo.setRows(5);
        jScrollPane3.setViewportView(yourCatalogueTextAreaTwo);

        javax.swing.GroupLayout yourCataloguePanelLayout = new javax.swing.GroupLayout(yourCataloguePanel);
        yourCataloguePanel.setLayout(yourCataloguePanelLayout);
        yourCataloguePanelLayout.setHorizontalGroup(
                yourCataloguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(yourCataloguePanelLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(90, Short.MAX_VALUE))
        );
        yourCataloguePanelLayout.setVerticalGroup(
                yourCataloguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, yourCataloguePanelLayout.createSequentialGroup()
                                .addContainerGap(60, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50))
        );

        resultPanel.add(yourCataloguePanel, "card2");

        returnCataloguePanel.setColumns(20);
        returnCataloguePanel.setRows(5);
        jScrollPane2.setViewportView(returnCataloguePanel);

        returnTextField.setText("Copy the whole title here...");

        confirmReturnButton.setText("Return");
        confirmReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmReturnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout returnPanelLayout = new javax.swing.GroupLayout(returnPanel);
        returnPanel.setLayout(returnPanelLayout);
        returnPanelLayout.setHorizontalGroup(
                returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(returnPanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(returnPanelLayout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addComponent(returnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(confirmReturnButton)))
                                .addContainerGap(55, Short.MAX_VALUE))
        );
        returnPanelLayout.setVerticalGroup(
                returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(returnPanelLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(returnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(confirmReturnButton))
                                .addContainerGap(50, Short.MAX_VALUE))
        );

        resultPanel.add(returnPanel, "card3");

        editProfilePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Here you may edit your profile accordingly. Kindly input all the columns before changing your profile.");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("When updating your account, remember to include all columns for the desired changes,");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("and write the unchanged information in the corresponding fields as well.");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("New username:");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("New email-adress:");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("New password");

        confirmChangesButton.setText("Confirm Changes");
        confirmChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editProfilePanelLayout = new javax.swing.GroupLayout(editProfilePanel);
        editProfilePanel.setLayout(editProfilePanelLayout);
        editProfilePanelLayout.setHorizontalGroup(
                editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                                .addGap(38, 38, 38)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                                .addGap(80, 80, 80)
                                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                                .addGap(253, 253, 253)
                                                .addComponent(confirmChangesButton))
                                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                                .addGap(101, 101, 101)
                                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(49, 49, 49)
                                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(newEmailAdressTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                                        .addComponent(newUsernameTextField)
                                                        .addComponent(newPasswordTextField))))
                                .addContainerGap(42, Short.MAX_VALUE))
        );
        editProfilePanelLayout.setVerticalGroup(
                editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(editProfilePanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel13)
                                        .addComponent(newPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(editProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel12)
                                        .addComponent(newEmailAdressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(confirmChangesButton)
                                .addContainerGap(43, Short.MAX_VALUE))
        );

        resultPanel.add(editProfilePanel, "card4");

        logLabel.setBackground(new java.awt.Color(204, 255, 255));
        logLabel.setForeground(new java.awt.Color(51, 51, 51));
        logLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logLabel.setText("Library Activity History");

        activityHistoryTextArea.setColumns(20);
        activityHistoryTextArea.setRows(5);
        jScrollPane4.setViewportView(activityHistoryTextArea);

        javax.swing.GroupLayout activityPanelLayout = new javax.swing.GroupLayout(activityPanel);
        activityPanel.setLayout(activityPanelLayout);
        activityPanelLayout.setHorizontalGroup(
                activityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(activityPanelLayout.createSequentialGroup()
                                .addGroup(activityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(activityPanelLayout.createSequentialGroup()
                                                .addGap(219, 219, 219)
                                                .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(activityPanelLayout.createSequentialGroup()
                                                .addGap(97, 97, 97)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(115, Short.MAX_VALUE))
        );
        activityPanelLayout.setVerticalGroup(
                activityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(activityPanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(logLabel)
                                .addGap(63, 63, 63)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(75, Short.MAX_VALUE))
        );

        resultPanel.add(activityPanel, "card5");

        searchResult.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setText("Media Type");

        mediatypePanel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mediatypePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(89, 89, 89))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(31, Short.MAX_VALUE)
                                .addComponent(mediatypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(mediatypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(97, Short.MAX_VALUE))
        );

        catalogueProfilePanel.setColumns(20);
        catalogueProfilePanel.setRows(5);
        jScrollPane1.setViewportView(catalogueProfilePanel);

        burrowButton.setText("Borrow");
        burrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burrowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchResultLayout = new javax.swing.GroupLayout(searchResult);
        searchResult.setLayout(searchResultLayout);
        searchResultLayout.setHorizontalGroup(
                searchResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchResultLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(searchResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(searchResultLayout.createSequentialGroup()
                                                .addGap(88, 88, 88)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(searchResultLayout.createSequentialGroup()
                                                .addGap(136, 136, 136)
                                                .addComponent(burrowButton)))
                                .addContainerGap(99, Short.MAX_VALUE))
        );
        searchResultLayout.setVerticalGroup(
                searchResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchResultLayout.createSequentialGroup()
                                .addGroup(searchResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(searchResultLayout.createSequentialGroup()
                                                .addGap(42, 42, 42)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(searchResultLayout.createSequentialGroup()
                                                .addGap(73, 73, 73)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(burrowButton)))
                                .addContainerGap(64, Short.MAX_VALUE))
        );

        resultPanel.add(searchResult, "card6");

        userNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userNameLabel.setText("Sup, (username)!!");

        javax.swing.GroupLayout homePanelInLayout = new javax.swing.GroupLayout(homePanelIn);
        homePanelIn.setLayout(homePanelInLayout);
        homePanelInLayout.setHorizontalGroup(
                homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelInLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(401, 401, 401))
                        .addGroup(homePanelInLayout.createSequentialGroup()
                                .addGroup(homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(homePanelInLayout.createSequentialGroup()
                                                .addGroup(homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(homePanelInLayout.createSequentialGroup()
                                                                .addGap(297, 297, 297)
                                                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(87, 87, 87))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelInLayout.createSequentialGroup()
                                                                .addComponent(yourCatalogueButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(returnButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(editProfileButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(activityButton)
                                                                .addGap(18, 18, 18)))
                                                .addComponent(logOutButton))
                                        .addGroup(homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(133, Short.MAX_VALUE))
        );
        homePanelInLayout.setVerticalGroup(
                homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(homePanelInLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(homePanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(yourCatalogueButton)
                                        .addComponent(returnButton)
                                        .addComponent(editProfileButton)
                                        .addComponent(activityButton)
                                        .addComponent(logOutButton)
                                        .addComponent(userNameLabel))
                                .addGap(74, 74, 74)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addGap(68, 68, 68)
                                .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
                homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(homePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(homePanelIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
                homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(homePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(homePanelIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        getContentPane().add(homePanel, "card3");

        pack();
    }// </editor-fold>

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {

        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
        resultPanel.removeAll();
        resultPanel.add(searchResult);



        logIn(connection, username, password);// TODO add your handling code here:

    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        String searchWord = searchField.getText();
        String sql = "SELECT id, title, mediaType, author, stocks, maxDaysOfRent " +
                "FROM allLibraryCatalogue WHERE title LIKE '%" + searchWord + "%' OR author LIKE '%" + searchWord + "%'";

        try {
            Statement statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            if (resultSet.next()) {
                JOptionPane.showMessageDialog(null, "We have it in our catalogue. Check if we have the stocks!");
                resultPanel.removeAll();
                resultPanel.add(searchResult);
                System.out.println("We have it in our catalogue");
                mediatypePanel.setText(resultSet.getString("mediaType"));
                catalogueProfilePanel.setEditable(false);
                catalogueProfilePanel.setLineWrap(true);
                catalogueProfilePanel.setWrapStyleWord(true);
                catalogueProfilePanel.setText("What you searched is a " +
                        resultSet.getString("mediaType") + " with title '"
                        + resultSet.getString("title") + "' by "
                        + resultSet.getString("author") + ". We currently have "
                        + resultSet.getString("stocks") + " of these in our catalogue."
                        + " If you wish to borrow this, you will have " + resultSet.getInt("maxDaysOfRent")
                        + " days to borrow.");
                System.out.println("What you searched is a/an " +
                        resultSet.getString("mediaType") + " with title '"
                        + resultSet.getString("title") + "' by "
                        + resultSet.getString("author") + ". We currently have "
                        + resultSet.getString("stocks") + " of these in our catalogue."
                        + " If you wish to borrow this, you will have " + resultSet.getInt("maxDaysOfRent")
                        + " days to borrow.");

                searchResult.repaint();
                searchResult.revalidate();
            } else {
                resultPanel.removeAll();
                JOptionPane.showMessageDialog(null, "We do not currently have it in our catalogue!");
                System.out.println("We do not currently have it in our catalogue!");
            }

        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }
    }

    private void burrowButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        System.out.print("User wants to borrow this item, execute borrow.");
        try {
            String sqlCommandToCheckIfItsAlreadyBorrowed = "select name, title from usersRent where name = '"
                    + userName + "' and title = '" + resultSet.getString("title") + "'";
            Statement stats = connection.createStatement(); // checking if it's already borrowed
            ResultSet rsChecksIfItsAlreadyBorrowed = stats.executeQuery(sqlCommandToCheckIfItsAlreadyBorrowed);
            if (!rsChecksIfItsAlreadyBorrowed.next()) {
                int checkingTheStocks = resultSet.getInt("stocks");
                if (checkingTheStocks > 0){
                    if (resultSet.getString("mediaType").equals("Book")) {
                        String sqlCommandForCreatinguserRentTable =
                                "insert into usersRent (usersId, name, allLibraryCatalogueId, title, mediaType, " +
                                        "dateBorrowed, dateToBeReturned) select u.id, u.name, a.id, " +
                                        "a.title, a.mediaType, current_date, date_add(Current_date, interval 30 day) " +
                                        "from users u join allLibraryCatalogue a on u.id = " + usersId +
                                        " and a.id = " + resultSet.getInt("id");
                        System.out.println(sqlCommandForCreatinguserRentTable);
                        try {
                            Statement statement = connection.createStatement();
                            int resultFromBorrowing = statement.executeUpdate(sqlCommandForCreatinguserRentTable);
                            String sqlCommandForGettingTheDatesToBeReturned = "select dateToBeReturned from usersRent where title " +
                                    "= '" + resultSet.getString("title") +
                                    "' and name = '" + userName + "'";
                            try {
                                Statement statementTwo = connection.createStatement();
                                ResultSet rsDateToBeReturned = statementTwo.executeQuery(sqlCommandForGettingTheDatesToBeReturned);
                                if (rsDateToBeReturned.next()) {
                                    Date dateToReturn = rsDateToBeReturned.getDate("dateToBeReturned");
                                    JOptionPane.showMessageDialog(null, "<html>You are borrowing " + resultSet.getString("title") +
                                            ", and you have " + resultSet.getInt("maxDaysOfRent") +
                                            " days until you have to return it (" + dateToReturn + ").<br>" +
                                            "To see all your due dates catalogues, click on your profile.<br>" +
                                            "Enjoy our catalogue and be sure to come back!</html>"
                                    );
                                    System.out.println("You are borrowing " + resultSet.getString
                                            ("title") + ", and you have " + resultSet.getInt
                                            ("maxDaysOfRent") + " days until you have to return it (" +
                                            dateToReturn + "). " +
                                            "To see all your due dates catalogues, click on your profile. " +
                                            "Enjoy our catalogue and be sure to come back!");
                                    String sqlUpdateStocks = "update allLibraryCatalogue set stocks = stocks - 1 where title = '"
                                            + resultSet.getString("title") + "'";
                                    try {
                                        stats.executeUpdate(sqlUpdateStocks);
                                    } catch (SQLException ex) {
                                        Database.PrintSQLException(ex);
                                    }
                                    log(connection, String.valueOf(usersId), userName + " is borrowing "
                                            + resultSet.getString("title"));
                                }
                            } catch (SQLException ex) {
                                Database.PrintSQLException(ex);
                            }
                        } catch (SQLException ex) {
                            Database.PrintSQLException(ex);
                        }
                    } else {
                        String sqlCommandForCreatinguserRentTable =
                                "insert into usersRent (usersId, name, allLibraryCatalogueId, title, mediaType, " +
                                        "dateBorrowed, dateToBeReturned) select u.id, u.name, a.id, " +
                                        "a.title, a.mediaType, current_date, date_add(Current_date, interval 10 day) " +
                                        "from users u join allLibraryCatalogue a on u.id = " + usersId +
                                        " and a.id = " + resultSet.getInt("id");
                        System.out.println(sqlCommandForCreatinguserRentTable);
                        try {
                            Statement statement = connection.createStatement();
                            statement.executeUpdate(sqlCommandForCreatinguserRentTable);
                            String sqlCommandForGettingTheDatesToBeReturned = "select dateToBeReturned from usersRent where title " +
                                    "= '" + resultSet.getString("title") +
                                    "' and name = '" + userName + "'";
                            try {
                                Statement statementTwo = connection.createStatement();
                                ResultSet rsDateToBeReturned = statementTwo.executeQuery(sqlCommandForGettingTheDatesToBeReturned);
                                if (rsDateToBeReturned.next()) {
                                    Date dateToReturn = rsDateToBeReturned.getDate("dateToBeReturned");
                                    JOptionPane.showMessageDialog(null, "<html>You are borrowing " + resultSet.getString("title") +
                                            ", and you have " + resultSet.getInt("maxDaysOfRent") +
                                            " days until you have to return it (" + dateToReturn + ").<br>" +
                                            "To see all your due dates catalogues, click on your profile.<br>" +
                                            "Enjoy our catalogue and be sure to come back!</html>");
                                    System.out.println("You are borrowing " + resultSet.getString
                                            ("title") + ", and you have " + resultSet.getInt
                                            ("maxDaysOfRent") + " days until you have to return it (" +
                                            dateToReturn + "). " +
                                            "To see all your due dates catalogues, click on your profile. " +
                                            "Enjoy our catalogue and be sure to come back!");
                                    String sqlUpdateStocks = "update allLibraryCatalogue set stocks = stocks - 1 where title = '"
                                            + resultSet.getString("title") + "'";
                                    try {
                                        stats.executeUpdate(sqlUpdateStocks);
                                    } catch (SQLException ex) {
                                        Database.PrintSQLException(ex);
                                    }
                                    log(connection, String.valueOf(usersId), userName + " is borrowing "
                                            + resultSet.getString("title"));
                                }
                            } catch (SQLException ex) {
                                Database.PrintSQLException(ex);
                            }
                        } catch (SQLException ex) {
                            Database.PrintSQLException(ex);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "<html>Please come back again,<br> the item is out of stocks</html>");
                    System.out.println("Please come back again, the item is out of stocks");
                }
            } else {
                JOptionPane.showMessageDialog(null, "<html>Oopsies! It looks like you already borrow this item.<br>"
                        + " Kindly check on your profile catalogue to see all the borrowed items in your cart.<br>"
                        + " Welcome back!</html>");
            }
        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }
    }

    private void yourCatalogueButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        resultPanel.removeAll();
        resultPanel.add(yourCataloguePanel);


        String sqlCommandToSeeUserCatalogue = "select * from usersRent where name = '" + userName + "'";

        try {
            Statement statement = connection.createStatement();
            rsSeeingUserCatalogue = statement.executeQuery(sqlCommandToSeeUserCatalogue);

            if (rsSeeingUserCatalogue.next()) {

                System.out.println("Here are the things that you have borrowed. " +
                        "Please copy paste the exact title below to return it.");

                int count = 0;
                usersCatalogueLists = "";

                do {
                    usersCatalogueLists += (count + 1) + ". Title: '" + rsSeeingUserCatalogue.getString("title") +
                            "'.\n Media Type: " + rsSeeingUserCatalogue.getString("mediaType") +
                            ". Date to be returned: " + rsSeeingUserCatalogue.getDate("dateToBeReturned") +
                            "\n";
                    count++;
                } while (rsSeeingUserCatalogue.next());

                yourCatalogueTextAreaTwo.setText("Here are the things that you have "
                        + "borrowed. \nBe sure to return them before the due dates to avoid fines." +
                        "\n \n \n" + usersCatalogueLists);

                yourCatalogueTextAreaTwo.setEditable(false);
                yourCatalogueTextAreaTwo.setLineWrap(true);
                yourCatalogueTextAreaTwo.setWrapStyleWord(true);
            }
            else {
                JOptionPane.showMessageDialog(null, "You do not have anything in your catalogue!");
                System.out.println("You do not have anything in your catalogue!");
            }
        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }

        yourCataloguePanel.repaint();
        yourCataloguePanel.revalidate();
    }

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");

        String sqlCommandToSeeUserCatalogue = "select * from usersRent where name = '" + userName + "'";

        try {
            Statement statement = connection.createStatement();
            rsSeeingUserCatalogue = statement.executeQuery(sqlCommandToSeeUserCatalogue);

            if (rsSeeingUserCatalogue.next()) {

                resultPanel.removeAll();
                resultPanel.add(returnPanel);

                returnCataloguePanel.setText("Here are the things that you may return now."
                        + "\nPlease note that you may return one item at a time." +
                        "\n \n \n" + usersCatalogueLists);
                returnCataloguePanel.setEditable(false);
                returnCataloguePanel.setLineWrap(true);
                returnCataloguePanel.setWrapStyleWord(true);

                returnPanel.repaint();
                returnPanel.revalidate();
            } else {
                JOptionPane.showMessageDialog(null, "You do not have anyting to return!");
            }
        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }
    }

    private void confirmReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        String titleToReturn = returnTextField.getText();

        String sqlCommandToReturnTheCatalogue = "DELETE FROM usersRent WHERE name = '" + userName +
                "' AND title = '" + titleToReturn + "'";

        try {
            Statement statement = connection.createStatement();
            int rsReturn = statement.executeUpdate(sqlCommandToReturnTheCatalogue);

            if (rsReturn > 0) {
                JOptionPane.showMessageDialog(null, titleToReturn + " is now returned! " +
                        "Thank you and welcome back.");
                System.out.println(titleToReturn + " is now returned! " +
                        "Thank you and welcome back.");
                log(connection, String.valueOf(usersId), userName + " is returning " + titleToReturn);

                String updateStocksSql = "update allLibraryCatalogue SET stocks = stocks + 1 where title = '"
                        + titleToReturn + "'";
                resultPanel.removeAll();
                resultPanel.add(searchResult);

                searchResult.repaint();
                searchResult.revalidate();

                try {
                    statement.executeUpdate(updateStocksSql);
                } catch (SQLException ex) {
                    Database.PrintSQLException(ex);
                }
            } else {
                // If rsReturn is not greater than 0, the title was not found in the user's catalog
                JOptionPane.showMessageDialog(null, "Title not found in your catalog. Please write it correctly.");
                System.out.println("Title not found in your catalog. Please write it correctly.");
            }
        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }

        // if the titleToReturn match with any of the title that the users have in his or her catalogueprofilelist, then proceeds to delete it from the database
        // if it doesnt then tell the user to write it correctly
    }

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(-1);
    }

    private void editProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        resultPanel.removeAll();
        resultPanel.add(editProfilePanel);

        editProfilePanel.repaint();
        editProfilePanel.revalidate();
    }

    private void confirmChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        String newName = newUsernameTextField.getText();
        String newPassword = newPasswordTextField.getText();
        String newEmail = newEmailAdressTextField.getText();

        if (newName.isEmpty() || newPassword.isEmpty() || newEmail.isEmpty()){
            JOptionPane.showMessageDialog(null, "Fill the fields that you do not \n"
                    + "want to change with your old setting");
        } else {
            String sql = "update users set name = '" + newName + "', password = '" + newPassword + "', email = '"
                    + newEmail + "' where id = " + usersId;

            try {
                Statement statement = connection.createStatement();
                int resultSet = statement.executeUpdate(sql);

                if (resultSet > 0) {
                    System.out.println("New set of name, password and email adress have been successfully updated.");
                    JOptionPane.showMessageDialog(null, "Profile update is sucessfull");
                    newUsernameTextField.setText("");
                    newPasswordTextField.setText("");
                    newEmailAdressTextField.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "<html>Oopsies! \n "
                            + "The profile update changes could not be completed. \n"
                            + "Try again!</html>");
                    System.out.println("The profile update changes could not be completed. Try again!");
                }

            } catch (SQLException ex) {
                Database.PrintSQLException(ex);
            }
        }
    }

    private void activityButtonActionPerformed(java.awt.event.ActionEvent evt) {
        userNameLabel.setText("Hi " + userName + "!");
        System.out.println("History:");
        resultPanel.removeAll();
        resultPanel.add(activityPanel);
        String sqlCommandToTakeTheHistoryLog = "select activityDate, message from log where usersId = " + usersId;

        try {
            Statement statement = connection.createStatement();
            ResultSet rsHistoryLog = statement.executeQuery(sqlCommandToTakeTheHistoryLog);

            if (rsHistoryLog.next()) {
                int count = 0;
                historyActivity = "";
                do {
                    historyActivity += ((count +1) + ". " + rsHistoryLog.getTimestamp("activityDate") +  ", " + rsHistoryLog.getString("message") + ". \n");
                    count++;
                } while (rsHistoryLog.next());
                activityHistoryTextArea.setText(historyActivity);
                activityHistoryTextArea.setEditable(false);
                activityHistoryTextArea.setLineWrap(true);
                activityHistoryTextArea.setWrapStyleWord(true);
            } else {
                System.out.println("You do not have activity history to show.");
            }
        } catch (SQLException ex) {
            Database.PrintSQLException(ex);
        }
        resultPanel.repaint();
        resultPanel.revalidate();
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryDatabase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton activityButton;
    private javax.swing.JTextArea activityHistoryTextArea;
    private javax.swing.JPanel activityPanel;
    private javax.swing.JButton burrowButton;
    private java.awt.Canvas canvas1;
    private javax.swing.JTextArea catalogueProfilePanel;
    private javax.swing.JButton confirmChangesButton;
    private javax.swing.JButton confirmReturnButton;
    private javax.swing.JButton editProfileButton;
    private javax.swing.JPanel editProfilePanel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel homePanelIn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logInButton;
    private javax.swing.JPanel logInPanel;
    private javax.swing.JPanel logInPanelLeft;
    private javax.swing.JPanel logInPanelRight;
    private javax.swing.JLabel logLabel;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel mediatypePanel;
    private javax.swing.JTextField newEmailAdressTextField;
    private javax.swing.JPasswordField newPasswordTextField;
    private javax.swing.JTextField newUsernameTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton returnButton;
    private javax.swing.JTextArea returnCataloguePanel;
    private javax.swing.JPanel returnPanel;
    private javax.swing.JTextField returnTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel searchResult;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JButton yourCatalogueButton;
    private javax.swing.JPanel yourCataloguePanel;
    private javax.swing.JTextArea yourCatalogueTextAreaTwo;
    // End of variables declaration

/*


    Initial code without GUI


    --------------------------------------------------------

    import java.sql.Connection;
    import java.sql.*;
    import java.util.Scanner;




public class Main {
   public static void main(String[] args) {


       //demoFromTheLessons();


       //pokemonExcercise();


       runLibraryProgram();


   }


   private static void runLibraryProgram(){
       Database.username = "root";
       Database.password = "Password3\"";
       Database.port = 3306;
       Database.database = "inlamningsuppgift";


       Connection connection = Database.getConnection();
       if (connection == null) {
           System.out.println("Kund inte ansluta till databasen");
           System.exit(-1);
           return;
       }


       Scanner scanner = new Scanner(System.in);
       String input = "";


       // maybe you can use this for creating the menu
       do {
           System.out.println("1. Log in");
           input = scanner.nextLine();
           switch (input) {
               case "1":
                   logIn(connection, scanner);
                   break;
           }
       } while(!input.equals("99"));


       try {
           connection.close();
       } catch (SQLException ex) {
           Database.PrintSQLException(ex);
       }


   }


   private static void logIn(Connection conn, Scanner scanner) {
       System.out.print("Write your name: ");
       String name = scanner.nextLine();
       System.out.print("Write down your password: ");
       String password = scanner.nextLine();


       String sql = "select * from users where name = '" + name + "' and password = '" + password + "'";
       try {


           Statement statement = conn.createStatement();
           ResultSet resultFromLogInProfile = statement.executeQuery(sql); // you use the resultset to show to the user
           // BUT THE ONLY working function is
           // statement.executeQuery(sql);
           if(resultFromLogInProfile.next()) {
               System.out.println("You are logged in!");
               int usersId = resultFromLogInProfile.getInt("id");
               String userName = resultFromLogInProfile.getString("name");
               log(conn, String.valueOf(usersId),name + " logs in");
               searchCatalogues(conn, scanner, usersId, userName);
               seeYourCataloguesAndReturnIt(conn, scanner, usersId, userName);
               editProfile(conn, scanner, usersId, userName);
               activities(conn, scanner, usersId, userName);
           } else {
               System.out.println("Wrong username and password combination, try again");
           }


       } catch(SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }


   private static void searchCatalogues(Connection conn, Scanner scanner, int usersId, String userName) {
       System.out.print("Search by Title or Author: ");
       String searchWord = scanner.nextLine();


       String sql = "SELECT id, title, mediaType, author, stocks, maxDaysOfRent " +
               "FROM allLibraryCatalogue WHERE title LIKE '%" + searchWord + "%' OR author LIKE '%" + searchWord + "%'";


       try {
           Statement statement = conn.createStatement();
           ResultSet resultSet = statement.executeQuery(sql);
           if (resultSet.next()) {
               System.out.println("We have it in our catalogue");
               System.out.println("What you searched is a/an " +
                       resultSet.getString("mediaType") + " with title '"
                       + resultSet.getString("title") + "' by "
                       + resultSet.getString("author") + ". We currently have "
                       + resultSet.getString("stocks") + " of these in our catalogue."
                       + " If you wish to borrow this, you will have " + resultSet.getInt("maxDaysOfRent")
                       + " days to borrow.");
               log(conn, String.valueOf(usersId), userName + " is searching " + searchWord);
               borrow(conn, scanner, resultSet, usersId, userName);
           } else {
               System.out.println("We do not currently have it in our catalogue!");
           }


       } catch (SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }


   private static void borrow(Connection conn, Scanner scanner, ResultSet resultFromSearchCatalogue, int usersId,
                              String userName)
           throws SQLException {
       System.out.println("Do you want to borrow this? Answer with 'Yes' or 'No'");
       String answer = scanner.nextLine();
       String sqlCommandToCheckIfItsAlreadyBorrowed = "select name, title from usersRent where name = '"
               + userName + "' and title = '" + resultFromSearchCatalogue.getString("title") + "'";
       if (answer.equals("Yes")) {
           Statement stats = conn.createStatement(); // checking if it's already borrowed
           ResultSet rsChecksIfItsAlreadyBorrowed = stats.executeQuery(sqlCommandToCheckIfItsAlreadyBorrowed);
           if (!rsChecksIfItsAlreadyBorrowed.next()) {
               int checkingTheStocks = resultFromSearchCatalogue.getInt("stocks");
               if (checkingTheStocks >= 0){
                   if (resultFromSearchCatalogue.getString("mediaType").equals("Book")) {
                       String sqlCommandForCreatinguserRentTable =
                               "insert into usersRent (usersId, name, allLibraryCatalogueId, title, mediaType, " +
                                       "dateBorrowed, dateToBeReturned) select u.id, u.name, a.id, " +
                                       "a.title, a.mediaType, current_date, date_add(Current_date, interval 30 day) " +
                                       "from users u join allLibraryCatalogue a on u.id = " + usersId +
                                       " and a.id = " + resultFromSearchCatalogue.getInt("id");
                       System.out.println(sqlCommandForCreatinguserRentTable);
                       try {
                           Statement statement = conn.createStatement();
                           int resultFromBorrowing = statement.executeUpdate(sqlCommandForCreatinguserRentTable);
                           String sqlCommandForGettingTheDatesToBeReturned = "select dateToBeReturned from usersRent where title " +
                                   "= '" + resultFromSearchCatalogue.getString("title") +
                                   "' and name = '" + userName + "'";
                           try {
                               Statement statementTwo = conn.createStatement();
                               ResultSet rsDateToBeReturned = statementTwo.executeQuery(sqlCommandForGettingTheDatesToBeReturned);
                               if (rsDateToBeReturned.next()) {
                                   Date dateToReturn = rsDateToBeReturned.getDate("dateToBeReturned");
                                   System.out.println("You are borrowing " + resultFromSearchCatalogue.getString
                                           ("title") + ", and you have " + resultFromSearchCatalogue.getInt
                                           ("maxDaysOfRent") + " days until you have to return it (" +
                                           dateToReturn + "). " +
                                           "To see all your due dates catalogues, click on your profile. " +
                                           "Enjoy our catalogue and be sure to come back!");
                                   String sqlUpdateStocks = "update allLibraryCatalogue set stocks = stocks - 1 where title = '"
                                           + resultFromSearchCatalogue.getString("title") + "'";
                                   try {
                                       stats.executeUpdate(sqlUpdateStocks);
                                   } catch (SQLException ex) {
                                       Database.PrintSQLException(ex);
                                   }
                                   log(conn, String.valueOf(usersId), userName + " is borrowing "
                                           + resultFromSearchCatalogue.getString("title"));
                               }
                           } catch (SQLException ex) {
                               Database.PrintSQLException(ex);
                           }
                       } catch (SQLException ex) {
                           Database.PrintSQLException(ex);
                       }
                   } else {
                       String sqlCommandForCreatinguserRentTable =
                               "insert into usersRent (usersId, name, allLibraryCatalogueId, title, mediaType, " +
                                       "dateBorrowed, dateToBeReturned) select u.id, u.name, a.id, " +
                                       "a.title, a.mediaType, current_date, date_add(Current_date, interval 10 day) " +
                                       "from users u join allLibraryCatalogue a on u.id = " + usersId +
                                       " and a.id = " + resultFromSearchCatalogue.getInt("id");
                       System.out.println(sqlCommandForCreatinguserRentTable);
                       try {
                           Statement statement = conn.createStatement();
                           statement.executeUpdate(sqlCommandForCreatinguserRentTable);
                           String sqlCommandForGettingTheDatesToBeReturned = "select dateToBeReturned from usersRent where title " +
                                   "= '" + resultFromSearchCatalogue.getString("title") +
                                   "' and name = '" + userName + "'";
                           try {
                               Statement statementTwo = conn.createStatement();
                               ResultSet rsDateToBeReturned = statementTwo.executeQuery(sqlCommandForGettingTheDatesToBeReturned);
                               if (rsDateToBeReturned.next()) {
                                   Date dateToReturn = rsDateToBeReturned.getDate("dateToBeReturned");
                                   System.out.println("You are borrowing " + resultFromSearchCatalogue.getString
                                           ("title") + ", and you have " + resultFromSearchCatalogue.getInt
                                           ("maxDaysOfRent") + " days until you have to return it (" +
                                           dateToReturn + "). " +
                                           "To see all your due dates catalogues, click on your profile. " +
                                           "Enjoy our catalogue and be sure to come back!");
                                   String sqlUpdateStocks = "update allLibraryCatalogue set stocks = stocks - 1 where title = '"
                                           + resultFromSearchCatalogue.getString("title") + "'";
                                   try {
                                       stats.executeUpdate(sqlUpdateStocks);
                                   } catch (SQLException ex) {
                                       Database.PrintSQLException(ex);
                                   }
                                   log(conn, String.valueOf(usersId), userName + " borrows "
                                           + resultFromSearchCatalogue.getString("title"));
                               }
                           } catch (SQLException ex) {
                               Database.PrintSQLException(ex);
                           }
                       } catch (SQLException ex) {
                           Database.PrintSQLException(ex);
                       }
                   }
               } else {
                   System.out.println("Please come back again, the item is out of stocks");
               }


           } else {
               System.out.println("Oops! It looks like you are already borrowing this item. You may borrow it again once the " +
                       "item is returned! To see all your due dates catalogues, " +
                       "click on your profile. " +
                       "Enjoy our catalogue and be sure to come back!");
           }
       }
   }


   private static void seeYourCataloguesAndReturnIt(Connection conn, Scanner scanner, int usersId, String userName) {


       String sql = "select * from usersRent where name = '" + userName + "'";


       try {
           Statement statement = conn.createStatement();
           ResultSet rsSeeingUserCatalogue = statement.executeQuery(sql);


           if (rsSeeingUserCatalogue.next()) {
               System.out.println("Here are the things that you have borrowed. " +
                       "Be sure to return them before the due dates to avoid fines.");
               int count = 0;
               do {
                   System.out.println((count + 1) + ". Title: '" + rsSeeingUserCatalogue.getString("title") +
                           "'. Media Type: " + rsSeeingUserCatalogue.getString("mediaType") +
                           ". Date to be returned: " + rsSeeingUserCatalogue.getDate("dateToBeReturned"));
                   System.out.println();
                   count++;
               } while (rsSeeingUserCatalogue.next());
               log(conn, String.valueOf(usersId), userName + " is checking profile catalogues");
               System.out.println("Do you want to return a catalogue early? " +
                       "If you do, directly copy the title of the catalogue you want to return." +
                       " Ps. Only one item return per login.");


               String titleOfTheCatalogueToReturn = scanner.nextLine();


               String sqlCommandToReturnTheCatalogue = "DELETE FROM usersRent WHERE name = '" + userName +
                       "' AND title = '" + titleOfTheCatalogueToReturn + "'";
               try {
                   statement = conn.createStatement();
                   int rsReturn = statement.executeUpdate(sqlCommandToReturnTheCatalogue);
                   if (rsReturn > 0) {
                       System.out.println(titleOfTheCatalogueToReturn + " is now returned! " +
                               "Thank you and welcome back.");
                       log(conn, String.valueOf(usersId), userName + " returns " + titleOfTheCatalogueToReturn);
                       String updateStocksSql = "update allLibraryCatalogue SET stocks = stocks + 1 where title = '"
                               + titleOfTheCatalogueToReturn + "'";
                       try {
                           statement.executeUpdate(updateStocksSql);
                       } catch (SQLException ex) {
                           Database.PrintSQLException(ex);
                       }
                   }
               } catch (SQLException ex) {
                   Database.PrintSQLException(ex);
               }


           } else {
               System.out.println("You do not have anything to return!");
           }
       } catch (SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }
   private static void editProfile(Connection conn, Scanner scanner, int usersId, String userName) {
       System.out.println("Welcome to editing page! Here you can edit your name, your password and your email. " +
               "Write your new name, password and email adress.");
       System.out.println("New name: ");
       String newName = scanner.nextLine();
       System.out.println("New password: ");
       String newPassword = scanner.nextLine();
       System.out.println("New email: ");
       String newEmail = scanner.nextLine();


       String sql = "update users set name = '" + newName + "', password = '" + newPassword + "', email = '"
               + newEmail + "' where id = " + usersId;


       try {
           Statement statement = conn.createStatement();
           int resultSet = statement.executeUpdate(sql);


           if (resultSet > 0) {
               System.out.println("New set of name, password and email adress have been successfully updated.");
               log(conn, String.valueOf(usersId), userName + " has changed the user profile setting");
           } else {
               System.out.println("The profile update changes could not be completed. Try again!");
           }


       } catch (SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }
   private static void activities(Connection conn, Scanner scanner, int usersId, String userName) {
       System.out.println("History:");
       String sqlCommandToTakeTheHistoryLog = "select activityDate, message from log where usersId = " + usersId;


       try {
           Statement statement = conn.createStatement();
           ResultSet rsHistoryLog = statement.executeQuery(sqlCommandToTakeTheHistoryLog);


           if (rsHistoryLog.next()) {
               int count = 0;
               do {
                   System.out.println((count +1) + ". " + rsHistoryLog.getTimestamp("activityDate") +  ", " + rsHistoryLog.getString("message") + ".");
                   count++;
               } while (rsHistoryLog.next());
               log(conn, String.valueOf(usersId), userName + " is looking at activity history.");
           } else {
               System.out.println("You do not have activity history to show.");
           }
       } catch (SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }


   private static void log(Connection conn, String userId, String message) {
       try {


           String user = (userId == null || userId.isEmpty()) ? "NULL" : userId;
           Statement statement = conn.createStatement();
           String sql = "INSERT INTO Log SET usersId = " + user + ", message = '" + message + "'";
           //System.out.println(sql);
           statement.executeUpdate(sql);
       } catch(SQLException ex) {
           Database.PrintSQLException(ex);
       }
   }



}


}


        */

}